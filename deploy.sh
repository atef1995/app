#!/bin/bash

# Vibed to Cracked - Easy Deployment Script
# This script helps you deploy your app with HTTPS support

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🚀 Vibed to Cracked - Deployment Script${NC}"
echo "=========================================="

# Check if docker and docker-compose are installed
if ! command -v docker &> /dev/null; then
    echo -e "${RED}❌ Docker is not installed. Please install Docker first.${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}❌ Docker Compose is not installed. Please install Docker Compose first.${NC}"
    exit 1
fi

# Function to prompt for input
prompt_input() {
    local prompt="$1"
    local var_name="$2"
    local default_value="$3"
    
    if [ -n "$default_value" ]; then
        read -p "$prompt [$default_value]: " input
        input=${input:-$default_value}
    else
        read -p "$prompt: " input
    fi
    
    eval "$var_name='$input'"
}

# Check if .env.production exists
if [ ! -f ".env.production" ]; then
    echo -e "${YELLOW}⚠️  .env.production not found. Let's create it!${NC}"
    
    # Domain configuration
    prompt_input "Enter your domain name (e.g., yourdomain.com)" DOMAIN
    prompt_input "Enter your email for SSL certificates" EMAIL
    
    # Database configuration
    prompt_input "Enter PostgreSQL password" POSTGRES_PASSWORD
    
    # NextAuth configuration
    echo -e "${YELLOW}Generating NextAuth secret...${NC}"
    NEXTAUTH_SECRET=$(openssl rand -base64 32)
    
    # OAuth configuration
    echo -e "${BLUE}📝 You'll need to set up OAuth applications:${NC}"
    echo "GitHub: https://github.com/settings/applications/new"
    echo "Google: https://console.developers.google.com/"
    
    prompt_input "Enter GitHub Client ID" GITHUB_ID
    prompt_input "Enter GitHub Client Secret" GITHUB_SECRET
    prompt_input "Enter Google Client ID" GOOGLE_CLIENT_ID
    prompt_input "Enter Google Client Secret" GOOGLE_CLIENT_SECRET
    
    # Stripe configuration
    prompt_input "Enter Stripe Secret Key (optional)" STRIPE_SECRET_KEY ""
    prompt_input "Enter Stripe Webhook Secret (optional)" STRIPE_WEBHOOK_SECRET ""
    
    # Create .env.production file
    cat > .env.production << EOF
# Generated by deployment script
DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/vibed_to_cracked
POSTGRES_DB=vibed_to_cracked
POSTGRES_USER=postgres
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

NEXTAUTH_URL=https://${DOMAIN}
NEXTAUTH_SECRET=${NEXTAUTH_SECRET}

GITHUB_ID=${GITHUB_ID}
GITHUB_SECRET=${GITHUB_SECRET}

GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}

STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}

EMAIL_FROM=noreply@${DOMAIN}
EOF

    # Update docker-compose.yml with domain
    sed -i "s/yourdomain.com/${DOMAIN}/g" docker-compose.yml
    sed -i "s/your-email@example.com/${EMAIL}/g" docker-compose.yml
    
    # Update nginx configuration with domain
    sed -i "s/yourdomain.com/${DOMAIN}/g" nginx/sites-available/vibed-to-cracked
    
    echo -e "${GREEN}✅ Configuration files updated!${NC}"
fi

# Enable nginx site
if [ ! -L "nginx/sites-enabled/vibed-to-cracked" ]; then
    ln -sf ../sites-available/vibed-to-cracked nginx/sites-enabled/vibed-to-cracked
    echo -e "${GREEN}✅ Nginx site enabled${NC}"
fi

# Function to check if SSL certificates exist
check_ssl_certs() {
    if docker-compose exec -T certbot ls /etc/letsencrypt/live/$DOMAIN &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# Build and start services
echo -e "${BLUE}🔨 Building and starting services...${NC}"
docker-compose up -d --build

# Wait for services to be ready
echo -e "${BLUE}⏳ Waiting for services to start...${NC}"
sleep 10

# Run database migrations
echo -e "${BLUE}🗄️  Running database migrations...${NC}"
docker-compose exec app npx prisma migrate deploy
docker-compose exec app npx prisma db seed

# Obtain SSL certificates
DOMAIN=$(grep "NEXTAUTH_URL" .env.production | cut -d'=' -f2 | sed 's/https:\/\///')
if ! check_ssl_certs; then
    echo -e "${BLUE}🔒 Obtaining SSL certificates...${NC}"
    docker-compose run --rm certbot
    
    # Reload nginx after getting certificates
    docker-compose exec nginx nginx -s reload
    echo -e "${GREEN}✅ SSL certificates obtained and nginx reloaded${NC}"
else
    echo -e "${GREEN}✅ SSL certificates already exist${NC}"
fi

# Setup automatic certificate renewal
echo -e "${BLUE}🔄 Setting up automatic certificate renewal...${NC}"
(crontab -l 2>/dev/null; echo "0 12 * * * cd $(pwd) && docker-compose run --rm certbot renew && docker-compose exec nginx nginx -s reload") | crontab -

echo ""
echo -e "${GREEN}🎉 Deployment completed successfully!${NC}"
echo ""
echo -e "${BLUE}📋 What's running:${NC}"
echo "• Next.js app: https://$DOMAIN"
echo "• PostgreSQL database"
echo "• Nginx reverse proxy with SSL"
echo "• Automatic SSL certificate renewal"
echo ""
echo -e "${BLUE}📝 Useful commands:${NC}"
echo "• View logs: docker-compose logs -f"
echo "• Stop services: docker-compose down"
echo "• Update app: docker-compose up --build -d app"
echo "• Database backup: docker-compose exec db pg_dump -U postgres vibed_to_cracked > backup.sql"
echo ""
echo -e "${YELLOW}🔒 Security reminders:${NC}"
echo "• Keep your .env.production file secure"
echo "• Regularly update Docker images"
echo "• Monitor your application logs"
echo "• Set up proper firewall rules"
