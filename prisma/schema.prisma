generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  username           String?             @unique
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  mood               String              @default("CHILL")
  subscription       String              @default("FREE")
  subscriptionStatus String              @default("INACTIVE")
  subscriptionEndsAt DateTime?
  stripeCustomerId   String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  challengeAttempts  ChallengeAttempt[]
  challengeProgress  ChallengeProgress[]
  payments           Payment[]
  progress           Progress[]
  quizAttempts       QuizAttempt[]
  sessions           Session[]
  subscriptions      Subscription[]
  tutorialProgress   TutorialProgress[]
  userSettings       UserSettings?

  // Achievements and Social
  achievements           UserAchievement[]
  friendRequestsSent     FriendRequest[]   @relation("FriendRequestSender")
  friendRequestsReceived FriendRequest[]   @relation("FriendRequestReceiver")
  friendships1           Friendship[]      @relation("User1")
  friendships2           Friendship[]      @relation("User2")
  progressShares         ProgressShare[]
  reactions              Reaction[]
  notifications          Notification[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Tutorial {
  id               String             @id @default(cuid())
  slug             String             @unique
  title            String
  description      String?
  content          String?
  mdxFile          String?
  difficulty       Int                @default(1)
  order            Int
  published        Boolean            @default(false)
  isPremium        Boolean            @default(false)
  requiredPlan     String             @default("FREE")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  progress         Progress[]
  quizzes          Quiz[]
  tutorialProgress TutorialProgress[]

  @@map("tutorials")
}

model Quiz {
  id           String        @id @default(cuid())
  slug         String        @unique
  tutorialId   String
  title        String
  questions    Json
  isPremium    Boolean       @default(false)
  requiredPlan String        @default("FREE")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  attempts     QuizAttempt[]
  tutorial     Tutorial      @relation(fields: [tutorialId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}

model QuizAttempt {
  id         String   @id @default(cuid())
  userId     String
  quizId     String
  tutorialId String
  answers    Json
  score      Float
  passed     Boolean
  timeSpent  Int?
  mood       String
  createdAt  DateTime @default(now())
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model TutorialProgress {
  id           String    @id @default(cuid())
  userId       String
  tutorialId   String
  status       String    @default("NOT_STARTED")
  quizPassed   Boolean   @default(false)
  quizAttempts Int       @default(0)
  bestScore    Float?
  timeSpent    Int?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tutorial     Tutorial  @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@map("tutorial_progress")
}

model ChallengeProgress {
  id             String    @id @default(cuid())
  userId         String
  challengeId    String
  status         String    @default("NOT_STARTED")
  passed         Boolean   @default(false)
  attempts       Int       @default(0)
  failedAttempts Int       @default(0)
  bestTime       Int?
  firstPassedAt  DateTime?
  lastAttemptAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  challenge      Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@map("challenge_progress")
}

model Progress {
  id           String    @id @default(cuid())
  userId       String
  tutorialId   String
  completed    Boolean   @default(false)
  score        Float?
  timeSpent    Int?
  quizzesTaken Int       @default(0)
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tutorial     Tutorial  @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@map("progress")
}

model CodeExecution {
  id         String   @id @default(cuid())
  userId     String?
  code       String
  result     String?
  error      String?
  success    Boolean
  timeSpent  Int?
  mood       String?
  tutorialId String?
  createdAt  DateTime @default(now())

  @@map("code_executions")
}

model Challenge {
  id                String                    @id @default(cuid())
  slug              String                    @unique
  title             String
  description       String
  difficulty        String                    @default("EASY")
  type              String                    @default("FUNCTION")
  estimatedTime     String
  starter           String
  solution          String
  order             Int                       @default(0)
  published         Boolean                   @default(true)
  isPremium         Boolean                   @default(false)
  requiredPlan      String                    @default("FREE")
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  attempts          ChallengeAttempt[]
  moodAdaptations   ChallengeMoodAdaptation[]
  challengeProgress ChallengeProgress[]
  tests             ChallengeTest[]

  @@map("challenges")
}

model ChallengeMoodAdaptation {
  id          String    @id @default(cuid())
  challengeId String
  mood        String
  content     String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, mood])
  @@map("challenge_mood_adaptations")
}

model ChallengeTest {
  id          String    @id @default(cuid())
  challengeId String
  input       Json
  expected    Json
  description String
  order       Int       @default(0)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("challenge_tests")
}

model ChallengeAttempt {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  code        String
  passed      Boolean
  timeSpent   Int?
  mood        String
  createdAt   DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("challenge_attempts")
}

model Payment {
  id                    String   @id @default(cuid())
  userId                String
  amount                Float
  currency              String   @default("usd")
  status                String   @default("PENDING")
  stripePaymentIntentId String?
  stripeSessionId       String?
  plan                  String
  metadata              Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  plan                 String
  status               String   @default("TRIAL")
  stripeSubscriptionId String?
  stripePriceId        String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UserSettings {
  id            String @id @default(cuid())
  userId        String @unique
  preferredMood String @default("CHILL")

  // Notification preferences
  emailNotifications       Boolean @default(true)
  reminderNotifications    Boolean @default(true)
  achievementNotifications Boolean @default(true)
  weeklyProgressReports    Boolean @default(false)

  // Privacy settings
  showPublicProfile Boolean @default(true)
  shareProgress     Boolean @default(false)
  allowAnalytics    Boolean @default(true)

  // Learning preferences
  dailyGoalMinutes Int     @default(30)
  reminderTime     String  @default("18:00")
  difficulty       String  @default("MEDIUM")
  autoSubmit       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// Achievements System
model Achievement {
  id          String @id @default(cuid())
  key         String @unique // e.g., "first_quiz", "speed_demon", "streak_week"
  title       String
  description String
  icon        String // emoji or icon name
  category    String // "learning", "streak", "social", "challenge"
  rarity      String @default("COMMON") // "COMMON", "RARE", "EPIC", "LEGENDARY"
  points      Int    @default(10)

  // Requirements for unlocking
  requirementType  String // "quiz_count", "streak_days", "challenges_solved", etc.
  requirementValue Int // e.g., 5 for "complete 5 quizzes"

  isHidden  Boolean  @default(false) // Hidden until unlocked
  createdAt DateTime @default(now())

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  notified      Boolean  @default(false)

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Social System
model FriendRequest {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  status      String    @default("PENDING") // "PENDING", "ACCEPTED", "DECLINED"
  message     String?
  createdAt   DateTime  @default(now())
  respondedAt DateTime?

  sender   User @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friendship {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())

  user1 User @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 User @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@map("friendships")
}

model ProgressShare {
  id          String   @id @default(cuid())
  userId      String
  type        String // "achievement", "quiz_completed", "streak", "challenge_solved"
  title       String
  description String?
  data        Json? // Additional data (score, time, etc.)
  visibility  String   @default("FRIENDS") // "PUBLIC", "FRIENDS", "PRIVATE"
  createdAt   DateTime @default(now())

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]

  @@map("progress_shares")
}

model Reaction {
  id              String   @id @default(cuid())
  userId          String
  progressShareId String
  type            String // "like", "love", "fire", "clap", "mind_blown"
  createdAt       DateTime @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  progressShare ProgressShare @relation(fields: [progressShareId], references: [id], onDelete: Cascade)

  @@unique([userId, progressShareId])
  @@map("reactions")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String // Recipient
  type      String // "friend_request", "friend_accepted", "reaction", "achievement", "mention"
  title     String
  message   String
  data      Json? // Additional context data
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
