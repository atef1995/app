generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  username                 String?                   @unique
  email                    String                    @unique
  emailVerified            DateTime?
  image                    String?
  mood                     String                    @default("CHILL")
  subscription             String                    @default("FREE")
  subscriptionStatus       String                    @default("INACTIVE")
  subscriptionEndsAt       DateTime?
  stripeCustomerId         String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  role                     String                    @default("USER")
  anonymousSessionId       String?
  conversionCampaign       String?
  conversionMedium         String?
  conversionSource         String?
  firstLandingPage         String?

  // GitHub integration for contribution system
  githubUsername           String?
  githubAccessToken        String?                   // Encrypted token for API access
  githubProfileUrl         String?

  // XP and leveling system
  xp                       Int                       @default(0)
  level                    Int                       @default(1)

  accounts                 Account[]
  certificates             Certificate[]
  challengeAttempts        ChallengeAttempt[]
  challengeCodeProgress    ChallengeCodeProgress[]
  challengeProgress        ChallengeProgress[]
  friendRequestsReceived   FriendRequest[]           @relation("FriendRequestReceiver")
  friendRequestsSent       FriendRequest[]           @relation("FriendRequestSender")
  friendships1             Friendship[]              @relation("User1")
  friendships2             Friendship[]              @relation("User2")
  notifications            Notification[]
  payments                 Payment[]
  progress                 Progress[]
  progressShares           ProgressShare[]
  projectProgress          ProjectProgress[]
  projectReviewAssignments ProjectReviewAssignment[]
  projectReviews           ProjectReview[]
  projectSubmissions       ProjectSubmission[]
  quizAttempts             QuizAttempt[]
  reactions                Reaction[]
  sessions                 Session[]
  subscriptions            Subscription[]
  tutorialFeedback         TutorialFeedback[]
  tutorialProgress         TutorialProgress[]
  achievements             UserAchievement[]
  userSettings             UserSettings?
  studyProgress            UserStudyProgress[]

  // Contribution system relations
  contributionSubmissions  ContributionSubmission[]
  contributionReviews      ContributionReview[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String
  description String
  difficulty  String     @default("beginner")
  topics      String[]
  duration    String
  iconBg      String     @default("bg-blue-100 dark:bg-blue-900")
  iconColor   String     @default("text-blue-600 dark:text-blue-400")
  badgeBg     String     @default("bg-blue-100 dark:bg-blue-900")
  badgeColor  String     @default("text-blue-800 dark:text-blue-200")
  dotColor    String     @default("bg-blue-600")
  order       Int        @default(0)
  published   Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tutorials   Tutorial[]

  @@map("categories")
}

model Tutorial {
  id               String             @id @default(cuid())
  slug             String             @unique
  title            String
  description      String?
  content          String?
  mdxFile          String?
  difficulty       Int                @default(1)
  order            Int
  published        Boolean            @default(false)
  isPremium        Boolean            @default(false)
  requiredPlan     String             @default("FREE")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  estimatedTime    Float              @default(60.0)
  categoryId       String
  progress         Progress[]
  quizzes          Quiz[]
  feedback         TutorialFeedback[]
  tutorialProgress TutorialProgress[]
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId, published, order])
  @@index([published, order])
  @@index([categoryId])
  @@map("tutorials")
}

model Quiz {
  id           String             @id @default(cuid())
  slug         String             @unique
  tutorialId   String
  title        String
  questions    Json
  isPremium    Boolean            @default(false)
  requiredPlan String             @default("FREE")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  attempts     QuizAttempt[]
  tutorial     Tutorial           @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  feedback     TutorialFeedback[]

  @@index([tutorialId])
  @@map("quizzes")
}

model QuizAttempt {
  id         String   @id @default(cuid())
  userId     String
  quizId     String
  tutorialId String
  answers    Json
  score      Float
  passed     Boolean
  timeSpent  Int?
  mood       String
  createdAt  DateTime @default(now())
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
  @@map("quiz_attempts")
}

model TutorialProgress {
  id           String    @id @default(cuid())
  userId       String
  tutorialId   String
  status       String    @default("NOT_STARTED")
  quizPassed   Boolean   @default(false)
  quizAttempts Int       @default(0)
  bestScore    Float?
  timeSpent    Int?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tutorial     Tutorial  @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@index([userId, quizPassed])
  @@map("tutorial_progress")
}

model ChallengeProgress {
  id             String    @id @default(cuid())
  userId         String
  challengeId    String
  status         String    @default("NOT_STARTED")
  passed         Boolean   @default(false)
  attempts       Int       @default(0)
  failedAttempts Int       @default(0)
  bestTime       Int?
  firstPassedAt  DateTime?
  lastAttemptAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  challenge      Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([userId, passed])
  @@map("challenge_progress")
}

model Progress {
  id           String    @id @default(cuid())
  userId       String
  tutorialId   String
  completed    Boolean   @default(false)
  score        Float?
  timeSpent    Int?
  quizzesTaken Int       @default(0)
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tutorial     Tutorial  @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@map("progress")
}

model CodeExecution {
  id         String   @id @default(cuid())
  userId     String?
  code       String
  result     String?
  error      String?
  success    Boolean
  timeSpent  Int?
  mood       String?
  tutorialId String?
  createdAt  DateTime @default(now())

  @@map("code_executions")
}

model TutorialFeedback {
  id               String   @id @default(cuid())
  userId           String
  tutorialId       String
  quizId           String?
  rating           Int
  helpful          Boolean?
  difficulty       String?
  completion       String?
  feedback         String?
  tags             Json?
  quizHelpful      Boolean?
  improvementAreas Json?
  positiveAspects  Json?
  isAnonymous      Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  quiz             Quiz?    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  tutorial         Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@index([tutorialId])
  @@index([rating])
  @@index([userId])
  @@map("tutorial_feedback")
}

model Challenge {
  id                String                    @id @default(cuid())
  slug              String                    @unique
  title             String
  description       String
  difficulty        String                    @default("EASY")
  type              String                    @default("FUNCTION")
  estimatedTime     String
  starter           String
  solution          String
  order             Int                       @default(0)
  published         Boolean                   @default(true)
  isPremium         Boolean                   @default(false)
  requiredPlan      String                    @default("FREE")
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  attempts          ChallengeAttempt[]
  codeProgress      ChallengeCodeProgress[]
  moodAdaptations   ChallengeMoodAdaptation[]
  challengeProgress ChallengeProgress[]
  tests             ChallengeTest[]

  @@map("challenges")
}

model ChallengeMoodAdaptation {
  id          String    @id @default(cuid())
  challengeId String
  mood        String
  content     String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, mood])
  @@map("challenge_mood_adaptations")
}

model ChallengeTest {
  id          String    @id @default(cuid())
  challengeId String
  input       Json
  expected    Json
  description String
  order       Int       @default(0)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("challenge_tests")
}

model ChallengeAttempt {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  code        String
  passed      Boolean
  timeSpent   Int?
  mood        String
  createdAt   DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("challenge_attempts")
}

model ChallengeCodeProgress {
  id           String    @id @default(cuid())
  userId       String
  challengeId  String
  code         String
  lastModified DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  challenge    Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@map("challenge_code_progress")
}

model Payment {
  id                    String   @id @default(cuid())
  userId                String
  amount                Float
  currency              String   @default("usd")
  status                String   @default("PENDING")
  stripePaymentIntentId String?
  stripeSessionId       String?
  plan                  String
  metadata              Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  plan                 String
  status               String   @default("TRIAL")
  stripeSubscriptionId String?
  stripePriceId        String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UserSettings {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  preferredMood            String   @default("CHILL")
  emailNotifications       Boolean  @default(true)
  reminderNotifications    Boolean  @default(true)
  achievementNotifications Boolean  @default(true)
  weeklyProgressReports    Boolean  @default(false)
  showPublicProfile        Boolean  @default(true)
  shareProgress            Boolean  @default(false)
  allowAnalytics           Boolean  @default(true)
  dailyGoalMinutes         Int      @default(30)
  reminderTime             String   @default("18:00")
  difficulty               String   @default("MEDIUM")
  autoSubmit               Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  timezone                 String   @default("UTC")
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Achievement {
  id               String            @id @default(cuid())
  key              String            @unique
  title            String
  description      String
  icon             String
  category         String
  rarity           String            @default("COMMON")
  points           Int               @default(10)
  requirementType  String
  requirementValue Int
  isHidden         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  notified      Boolean     @default(false)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model FriendRequest {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  status      String    @default("PENDING")
  message     String?
  createdAt   DateTime  @default(now())
  respondedAt DateTime?
  receiver    User      @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User      @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friendship {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  user1     User     @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@map("friendships")
}

model ProgressShare {
  id          String     @id @default(cuid())
  userId      String
  type        String
  title       String
  description String?
  data        Json?
  visibility  String     @default("FRIENDS")
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions   Reaction[]

  @@map("progress_shares")
}

model Reaction {
  id              String        @id @default(cuid())
  userId          String
  progressShareId String
  type            String
  createdAt       DateTime      @default(now())
  progressShare   ProgressShare @relation(fields: [progressShareId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, progressShareId])
  @@map("reactions")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Project {
  id              String              @id @default(cuid())
  slug            String              @unique
  title           String
  description     String
  requirements    Json
  category        String
  difficulty      Int                 @default(1)
  estimatedHours  Int                 @default(4)
  order           Int                 @default(0)
  published       Boolean             @default(false)
  isPremium       Boolean             @default(false)
  requiredPlan    String              @default("FREE")
  submissionType  String              @default("CODE")
  reviewType      String              @default("PEER")
  minReviews      Int                 @default(2)
  dueDate         DateTime?
  resources       Json?
  rubric          Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  projectProgress ProjectProgress[]
  submissions     ProjectSubmission[]

  @@map("projects")
}

model ProjectSubmission {
  id                String                    @id @default(cuid())
  userId            String
  projectId         String
  title             String?
  description       String?
  submissionUrl     String?
  submissionFiles   Json?
  sourceCode        String?
  notes             String?
  status            String                    @default("DRAFT")
  submittedAt       DateTime?
  reviewedAt        DateTime?
  grade             Float?
  isPublic          Boolean                   @default(true)
  allowFeedback     Boolean                   @default(true)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  reviewAssignments ProjectReviewAssignment[]
  reviews           ProjectReview[]
  project           Project                   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_submissions")
}

model ProjectReview {
  id             String                   @id @default(cuid())
  submissionId   String
  reviewerId     String
  assignmentId   String?
  type           String                   @default("PEER")
  status         String                   @default("PENDING")
  overallScore   Float?
  criteriaScores Json?
  strengths      String?
  improvements   String?
  suggestions    String?
  isConstructive Boolean?
  timeSpent      Int?
  submittedAt    DateTime?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  assignment     ProjectReviewAssignment? @relation(fields: [assignmentId], references: [id])
  reviewer       User                     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  submission     ProjectSubmission        @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("project_reviews")
}

model ProjectReviewAssignment {
  id              String            @id @default(cuid())
  submissionId    String
  reviewerId      String
  assignedBy      String            @default("SYSTEM")
  priority        Int               @default(1)
  status          String            @default("UNASSIGNED")
  dueDate         DateTime
  acceptedAt      DateTime?
  completedAt     DateTime?
  declinedReason  String?
  remindersSent   Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  expiredAt       DateTime
  rejectedAt      DateTime
  rejectionReason String
  type            String
  reviewer        User              @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  submission      ProjectSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  reviews         ProjectReview[]

  @@unique([submissionId, reviewerId])
  @@map("project_review_assignments")
}

model ProjectProgress {
  id               String    @id @default(cuid())
  userId           String
  projectId        String
  status           String    @default("NOT_STARTED")
  submissionStatus String    @default("DRAFT")
  grade            Float?
  timeSpent        Int       @default(0)
  completedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  project          Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_progress")
}

model UserStudyProgress {
  id                      String   @id @default(cuid())
  userId                  String
  studyPlanId             String
  currentPhaseId          String
  currentStepId           String
  completedSteps          String[]
  completedPhases         String[]
  totalProgressPercentage Int      @default(0)
  hoursSpent              Float    @default(0)
  startedAt               DateTime @default(now())
  estimatedCompletionDate DateTime
  lastActivityAt          DateTime @default(now())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, studyPlanId])
  @@map("user_study_progress")
}

model Skill {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  category    String
  keywords    String[]
  iconName    String
  level       String   @default("BEGINNER")
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("skills")
}

model Certificate {
  id           String          @id @default(cuid())
  userId       String
  type         CertificateType
  entityId     String
  entityTitle  String
  entitySlug   String
  completedAt  DateTime
  issuedAt     DateTime        @default(now())
  shareableId  String          @unique
  shareableUrl String?
  isPublic     Boolean         @default(false)
  metadata     Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, entityId])
  @@map("certificates")
}

model Phase {
  id             String      @id @default(cuid())
  slug           String      @unique
  title          String
  description    String
  color          String
  icon           String
  order          Int         @default(0)
  estimatedWeeks Int         @default(1)
  prerequisites  String[]
  published      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  phaseSteps     PhaseStep[]

  @@map("phases")
}

model PhaseStep {
  id             String   @id @default(cuid())
  phaseId        String
  contentType    String
  contentId      String
  contentSlug    String
  order          Int      @default(0)
  isOptional     Boolean  @default(false)
  estimatedHours Float    @default(1.0)
  prerequisites  String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  phase          Phase    @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  @@unique([phaseId, contentType, contentId])
  @@map("phase_steps")
}

model AnonymousSession {
  id                String    @id @default(cuid())
  anonymousId       String    @unique
  tutorialsViewed   Json      @default("[]")
  totalTimeSpent    Int       @default(0)
  pagesViewed       Int       @default(0)
  source            String?
  medium            String?
  campaign          String?
  referrer          String?
  landingPage       String?
  userAgent         String?
  device            String?
  browser           String?
  os                String?
  country           String?
  region            String?
  city              String?
  createdAt         DateTime  @default(now())
  lastActiveAt      DateTime  @updatedAt
  convertedToUserId String?
  convertedAt       DateTime?
  ipAddress         String?

  @@index([anonymousId])
  @@index([convertedToUserId])
  @@index([createdAt])
  @@map("anonymous_sessions")
}

enum CertificateType {
  TUTORIAL
  CATEGORY
}

// ============================================================================
// Contribution System Models
// GitHub PR-based project submission and code review system
// ============================================================================

model ContributionProject {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  description     String
  githubRepoUrl   String   // Main template repo students fork from
  githubOwner     String   // e.g., "vibed-to-cracked"
  githubRepo      String   // e.g., "student-portfolio-site"
  category        String   // "frontend", "backend", "fullstack"
  difficulty      Int      // 1-5
  estimatedHours  Int

  // Feature-based assignments (JSON array of feature specs)
  features        Json     // Array of feature specifications

  // PR Requirements
  prTemplate      String   // Template for PR descriptions
  requiredChecks  Json     // CI/CD checks required
  reviewCriteria  Json     // What reviewers should look for

  // Gamification
  xpReward        Int      @default(100)
  badgeId         String?  // Award badge on completion

  isPremium       Boolean  @default(false)
  requiredPlan    String   @default("FREE")
  published       Boolean  @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  submissions     ContributionSubmission[]

  @@map("contribution_projects")
}

model ContributionSubmission {
  id                  String   @id @default(cuid())
  userId              String
  projectId           String

  // GitHub Integration
  githubPrUrl         String   // Full PR URL
  githubPrNumber      Int
  githubBranch        String   // Their feature branch
  githubForkUrl       String   // Their fork URL

  // PR Status
  prStatus            String   @default("OPEN") // OPEN, MERGED, CLOSED, CHANGES_REQUESTED
  prTitle             String
  prDescription       String   @db.Text

  // Feature Implementation
  featureId           String   // Which feature they implemented
  featureTitle        String

  // Automated Checks
  ciPassed            Boolean  @default(false)
  lintPassed          Boolean  @default(false)
  testsPassed         Boolean  @default(false)

  // Review Process
  peerReviewsNeeded   Int      @default(2)
  peerReviewsReceived Int      @default(0)
  mentorReviewStatus  String   @default("PENDING") // PENDING, APPROVED, CHANGES_REQUESTED

  // Grading
  codeQuality         Float?   // 0-100
  implementsSpec      Boolean  @default(false)
  followsStandards    Boolean  @default(false)
  grade               Float?   // Final grade

  // Timestamps
  submittedAt         DateTime @default(now())
  mergedAt            DateTime?
  completedAt         DateTime?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  project             ContributionProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews             ContributionReview[]

  @@unique([userId, projectId, featureId])
  @@index([userId])
  @@index([projectId])
  @@index([prStatus])
  @@map("contribution_submissions")
}

model ContributionReview {
  id                String   @id @default(cuid())
  submissionId      String
  reviewerId        String

  // Review Content
  type              String   @default("PEER") // PEER or MENTOR
  status            String   @default("PENDING") // PENDING, APPROVED, CHANGES_REQUESTED, COMPLETED

  // Code Review
  filesReviewed     Int      @default(0)
  commentsAdded     Int      @default(0)
  githubReviewUrl   String?  // Link to GitHub review

  // Scoring (using rubric)
  codeQualityScore  Float?   // 0-100
  functionalityScore Float?  // 0-100
  documentationScore Float?  // 0-100
  bestPracticesScore Float?  // 0-100
  overallScore      Float?   // 0-100

  // Feedback
  strengths         String?  @db.Text
  improvements      String?  @db.Text
  suggestions       String?  @db.Text

  // XP Rewards
  xpAwarded         Int      @default(25) // Reviewer gets XP too!

  submittedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  submission        ContributionSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  reviewer          User @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([reviewerId])
  @@index([type])
  @@map("contribution_reviews")
}
