// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  mood          Mood      @default(CHILL)
  subscription  Plan      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  tutorialProgress  TutorialProgress[]
  challengeProgress ChallengeProgress[]
  progress          Progress[]
  quizAttempts      QuizAttempt[]
  challengeAttempts ChallengeAttempt[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Tutorial {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  content     String? // Optional - content can come from MDX file
  mdxFile     String? // Reference to MDX file name
  difficulty  Int      @default(1)
  order       Int
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quizzes          Quiz[]
  tutorialProgress TutorialProgress[]
  progress         Progress[]

  @@map("tutorials")
}

model Quiz {
  id         String   @id @default(cuid())
  tutorialId String
  title      String
  questions  Json // Array of question objects
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tutorial Tutorial      @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  attempts QuizAttempt[]

  @@map("quizzes")
}

model QuizAttempt {
  id         String   @id @default(cuid())
  userId     String
  quizId     String
  tutorialId String // link to tutorial for completion tracking
  answers    Json // array of user answers
  score      Float // percentage score (0-100)
  passed     Boolean // whether they passed (score >= passing threshold)
  timeSpent  Int? // time in seconds
  mood       Mood
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model TutorialProgress {
  id           String           @id @default(cuid())
  userId       String
  tutorialId   String
  status       CompletionStatus @default(NOT_STARTED)
  quizPassed   Boolean          @default(false)
  quizAttempts Int              @default(0)
  bestScore    Float? // best quiz score percentage
  timeSpent    Int? // total time in seconds
  completedAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutorial Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@map("tutorial_progress")
}

model ChallengeProgress {
  id             String           @id @default(cuid())
  userId         String
  challengeId    String
  status         CompletionStatus @default(NOT_STARTED)
  passed         Boolean          @default(false)
  attempts       Int              @default(0)
  failedAttempts Int              @default(0)
  bestTime       Int? // best completion time in seconds
  firstPassedAt  DateTime?
  lastAttemptAt  DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@map("challenge_progress")
}

model Progress {
  id           String    @id @default(cuid())
  userId       String
  tutorialId   String
  completed    Boolean   @default(false)
  score        Float? // percentage score
  timeSpent    Int? // total time in seconds
  quizzesTaken Int       @default(0)
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutorial Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@map("progress")
}

model CodeExecution {
  id         String   @id @default(cuid())
  userId     String?
  code       String
  result     String?
  error      String?
  success    Boolean
  timeSpent  Int? // execution time in ms
  mood       Mood?
  tutorialId String?
  createdAt  DateTime @default(now())

  @@map("code_executions")
}

model Challenge {
  id            String        @id @default(cuid())
  title         String
  description   String
  difficulty    Difficulty    @default(EASY)
  type          ChallengeType @default(FUNCTION)
  estimatedTime String
  starter       String // starter code
  solution      String // solution code
  order         Int           @default(0)
  published     Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  moodAdaptations   ChallengeMoodAdaptation[]
  tests             ChallengeTest[]
  attempts          ChallengeAttempt[]
  challengeProgress ChallengeProgress[]

  @@map("challenges")
}

model ChallengeMoodAdaptation {
  id          String @id @default(cuid())
  challengeId String
  mood        Mood
  content     String // mood-specific motivation text

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, mood])
  @@map("challenge_mood_adaptations")
}

model ChallengeTest {
  id          String @id @default(cuid())
  challengeId String
  input       Json // test input data
  expected    Json // expected output
  description String
  order       Int    @default(0)

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("challenge_tests")
}

model ChallengeAttempt {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  code        String
  passed      Boolean
  timeSpent   Int? // time in seconds
  mood        Mood
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("challenge_attempts")
}

enum Mood {
  CHILL
  RUSH
  GRIND
}

enum Plan {
  FREE
  PAID
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ChallengeType {
  ALGORITHM
  FUNCTION
  ARRAY
  OBJECT
  LOGIC
}

enum CompletionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}
