generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                     String              @id @default(cuid())
  name                   String?
  username               String?             @unique
  email                  String              @unique
  emailVerified          DateTime?
  image                  String?
  role                   String              @default("USER")
  mood                   String              @default("CHILL")
  subscription           String              @default("FREE")
  subscriptionStatus     String              @default("INACTIVE")
  subscriptionEndsAt     DateTime?
  stripeCustomerId       String?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  accounts               Account[]
  challengeAttempts      ChallengeAttempt[]
  challengeProgress      ChallengeProgress[]
  challengeCodeProgress  ChallengeCodeProgress[]
  friendRequestsReceived FriendRequest[]     @relation("FriendRequestReceiver")
  friendRequestsSent     FriendRequest[]     @relation("FriendRequestSender")
  friendships1           Friendship[]        @relation("User1")
  friendships2           Friendship[]        @relation("User2")
  notifications          Notification[]
  payments               Payment[]
  progress               Progress[]
  progressShares         ProgressShare[]
  quizAttempts           QuizAttempt[]
  reactions              Reaction[]
  sessions               Session[]
  subscriptions          Subscription[]
  tutorialProgress       TutorialProgress[]
  achievements           UserAchievement[]
  userSettings           UserSettings?
  projectSubmissions     ProjectSubmission[]
  projectReviews         ProjectReview[]
  projectReviewAssignments ProjectReviewAssignment[]
  projectProgress        ProjectProgress[]
  studyProgress          UserStudyProgress[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id           String    @id @default(cuid())
  slug         String    @unique
  title        String
  description  String
  difficulty   String    @default("beginner") // "beginner", "intermediate", "advanced"
  topics       String[]  // Array of topic strings
  duration     String    // e.g., "4-6 hours"
  iconBg       String    @default("bg-blue-100 dark:bg-blue-900")
  iconColor    String    @default("text-blue-600 dark:text-blue-400")
  badgeBg      String    @default("bg-blue-100 dark:bg-blue-900")
  badgeColor   String    @default("text-blue-800 dark:text-blue-200")
  dotColor     String    @default("bg-blue-600")
  order        Int       @default(0)
  published    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tutorials    Tutorial[]

  @@map("categories")
}

model Tutorial {
  id               String             @id @default(cuid())
  slug             String             @unique
  title            String
  description      String?
  content          String?
  mdxFile          String?
  categoryId       String
  difficulty       Int                @default(1)
  estimatedTime    Float              @default(60.0)
  order            Int
  published        Boolean            @default(false)
  isPremium        Boolean            @default(false)
  requiredPlan     String             @default("FREE")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  progress         Progress[]
  quizzes          Quiz[]
  tutorialProgress TutorialProgress[]

  @@map("tutorials")
}

model Quiz {
  id           String        @id @default(cuid())
  slug         String        @unique
  tutorialId   String
  title        String
  questions    Json
  isPremium    Boolean       @default(false)
  requiredPlan String        @default("FREE")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  attempts     QuizAttempt[]
  tutorial     Tutorial      @relation(fields: [tutorialId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}

model QuizAttempt {
  id         String   @id @default(cuid())
  userId     String
  quizId     String
  tutorialId String
  answers    Json
  score      Float
  passed     Boolean
  timeSpent  Int?
  mood       String
  createdAt  DateTime @default(now())
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model TutorialProgress {
  id           String    @id @default(cuid())
  userId       String
  tutorialId   String
  status       String    @default("NOT_STARTED")
  quizPassed   Boolean   @default(false)
  quizAttempts Int       @default(0)
  bestScore    Float?
  timeSpent    Int?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tutorial     Tutorial  @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@map("tutorial_progress")
}

model ChallengeProgress {
  id             String    @id @default(cuid())
  userId         String
  challengeId    String
  status         String    @default("NOT_STARTED")
  passed         Boolean   @default(false)
  attempts       Int       @default(0)
  failedAttempts Int       @default(0)
  bestTime       Int?
  firstPassedAt  DateTime?
  lastAttemptAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  challenge      Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@map("challenge_progress")
}

model Progress {
  id           String    @id @default(cuid())
  userId       String
  tutorialId   String
  completed    Boolean   @default(false)
  score        Float?
  timeSpent    Int?
  quizzesTaken Int       @default(0)
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tutorial     Tutorial  @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@map("progress")
}

model CodeExecution {
  id         String   @id @default(cuid())
  userId     String?
  code       String
  result     String?
  error      String?
  success    Boolean
  timeSpent  Int?
  mood       String?
  tutorialId String?
  createdAt  DateTime @default(now())

  @@map("code_executions")
}

model Challenge {
  id                String                    @id @default(cuid())
  slug              String                    @unique
  title             String
  description       String
  difficulty        String                    @default("EASY")
  type              String                    @default("FUNCTION")
  estimatedTime     String
  starter           String
  solution          String
  order             Int                       @default(0)
  published         Boolean                   @default(true)
  isPremium         Boolean                   @default(false)
  requiredPlan      String                    @default("FREE")
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  attempts          ChallengeAttempt[]
  moodAdaptations   ChallengeMoodAdaptation[]
  challengeProgress ChallengeProgress[]
  codeProgress      ChallengeCodeProgress[]
  tests             ChallengeTest[]

  @@map("challenges")
}

model ChallengeMoodAdaptation {
  id          String    @id @default(cuid())
  challengeId String
  mood        String
  content     String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, mood])
  @@map("challenge_mood_adaptations")
}

model ChallengeTest {
  id          String    @id @default(cuid())
  challengeId String
  input       Json
  expected    Json
  description String
  order       Int       @default(0)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("challenge_tests")
}

model ChallengeAttempt {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  code        String
  passed      Boolean
  timeSpent   Int?
  mood        String
  createdAt   DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("challenge_attempts")
}

model ChallengeCodeProgress {
  id           String   @id @default(cuid())
  userId       String
  challengeId  String
  code         String
  lastModified DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  challenge    Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@map("challenge_code_progress")
}

model Payment {
  id                    String   @id @default(cuid())
  userId                String
  amount                Float
  currency              String   @default("usd")
  status                String   @default("PENDING")
  stripePaymentIntentId String?
  stripeSessionId       String?
  plan                  String
  metadata              Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  plan                 String
  status               String   @default("TRIAL")
  stripeSubscriptionId String?
  stripePriceId        String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UserSettings {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  preferredMood            String   @default("CHILL")
  emailNotifications       Boolean  @default(true)
  reminderNotifications    Boolean  @default(true)
  achievementNotifications Boolean  @default(true)
  weeklyProgressReports    Boolean  @default(false)
  showPublicProfile        Boolean  @default(true)
  shareProgress            Boolean  @default(false)
  allowAnalytics           Boolean  @default(true)
  dailyGoalMinutes         Int      @default(30)
  reminderTime             String   @default("18:00")
  timezone                 String   @default("UTC")
  difficulty               String   @default("MEDIUM")
  autoSubmit               Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Achievement {
  id               String            @id @default(cuid())
  key              String            @unique
  title            String
  description      String
  icon             String
  category         String
  rarity           String            @default("COMMON")
  points           Int               @default(10)
  requirementType  String
  requirementValue Int
  isHidden         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  notified      Boolean     @default(false)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model FriendRequest {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  status      String    @default("PENDING")
  message     String?
  createdAt   DateTime  @default(now())
  respondedAt DateTime?
  receiver    User      @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User      @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friendship {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  user1     User     @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@map("friendships")
}

model ProgressShare {
  id          String     @id @default(cuid())
  userId      String
  type        String
  title       String
  description String?
  data        Json?
  visibility  String     @default("FRIENDS")
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions   Reaction[]

  @@map("progress_shares")
}

model Reaction {
  id              String        @id @default(cuid())
  userId          String
  progressShareId String
  type            String
  createdAt       DateTime      @default(now())
  progressShare   ProgressShare @relation(fields: [progressShareId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, progressShareId])
  @@map("reactions")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Project System Models
model Project {
  id              String            @id @default(cuid())
  slug            String            @unique
  title           String
  description     String
  requirements    Json              // Array of requirement objects
  category        String            // "fundamentals", "oop", etc.
  difficulty      Int               @default(1)
  estimatedHours  Int               @default(4)
  order           Int               @default(0)
  published       Boolean           @default(false)
  isPremium       Boolean           @default(false)
  requiredPlan    String            @default("FREE")
  submissionType  String            @default("CODE") // "CODE", "LINK", "FILE"
  reviewType      String            @default("PEER") // "PEER", "INSTRUCTOR", "AUTO"
  minReviews      Int               @default(2)
  dueDate         DateTime?
  resources       Json?             // Array of helpful resources
  rubric          Json?             // Grading rubric
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  submissions     ProjectSubmission[]
  projectProgress ProjectProgress[]

  @@map("projects")
}

model ProjectSubmission {
  id                String                     @id @default(cuid())
  userId            String
  projectId         String
  title             String?
  description       String?
  submissionUrl     String?                    // GitHub repo, CodePen, etc.
  submissionFiles   Json?                      // File uploads metadata
  sourceCode        String?                    // Inline code submission
  notes             String?                    // Student notes
  status            String                     @default("DRAFT") // "DRAFT", "SUBMITTED", "UNDER_REVIEW", "REVIEWED", "APPROVED", "NEEDS_REVISION"
  submittedAt       DateTime?
  reviewedAt        DateTime?
  grade             Float?                     // 0-100 score
  isPublic          Boolean                    @default(true)
  allowFeedback     Boolean                    @default(true)
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  project           Project                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user              User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews           ProjectReview[]
  reviewAssignments ProjectReviewAssignment[]

  @@unique([userId, projectId])
  @@map("project_submissions")
}

model ProjectReview {
  id                String            @id @default(cuid())
  submissionId      String
  reviewerId        String
  assignmentId      String?           // Links to assignment for tracking
  type              String            @default("PEER") // "PEER", "INSTRUCTOR", "SELF"
  status            String            @default("PENDING") // "PENDING", "IN_PROGRESS", "COMPLETED", "OVERDUE"
  overallScore      Float?            // 0-100
  criteriaScores    Json?             // Object with scores for each criteria
  strengths         String?           // What was done well
  improvements      String?           // Areas for improvement
  suggestions       String?           // Specific suggestions
  isConstructive    Boolean?          // Flagged by system/users
  timeSpent         Int?              // Minutes spent reviewing
  submittedAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  assignment        ProjectReviewAssignment? @relation(fields: [assignmentId], references: [id])
  reviewer          User              @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  submission        ProjectSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("project_reviews")
}

model ProjectReviewAssignment {
  id             String            @id @default(cuid())
  submissionId   String
  reviewerId     String
  assignedBy     String            @default("SYSTEM") // "SYSTEM", user_id for manual assignment
  priority       Int               @default(1) // Higher number = higher priority
  status         String            @default("ASSIGNED") // "ASSIGNED", "ACCEPTED", "DECLINED", "COMPLETED", "OVERDUE"
  dueDate        DateTime
  acceptedAt     DateTime?
  completedAt    DateTime?
  declinedReason String?
  remindersSent  Int               @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  reviewer       User              @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  submission     ProjectSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  reviews        ProjectReview[]

  @@unique([submissionId, reviewerId])
  @@map("project_review_assignments")
}

model ProjectProgress {
  id               String    @id @default(cuid())
  userId           String
  projectId        String
  status           String    @default("NOT_STARTED")
  submissionStatus String    @default("DRAFT")
  grade            Float?
  timeSpent        Int       @default(0)
  completedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  project          Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_progress")
}

model UserStudyProgress {
  id                       String   @id @default(cuid())
  userId                   String
  studyPlanId              String
  currentPhaseId           String
  currentStepId            String
  completedSteps           String[]
  completedPhases          String[]
  totalProgressPercentage  Int      @default(0)
  hoursSpent               Float    @default(0)
  startedAt                DateTime @default(now())
  estimatedCompletionDate  DateTime
  lastActivityAt           DateTime @default(now())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, studyPlanId])
  @@map("user_study_progress")
}
